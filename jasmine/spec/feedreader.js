/* feedreader.js
 *
 * This is the spec file that Jasmine will read and contains
 * all of the tests that will be run against your application.
 */

/* We're placing all of our tests within the $() function,
 * since some of these tests may require DOM elements. We want
 * to ensure they don't run until the DOM is ready.
 */
$(function() {
    /* This is our first test suite - a test suite just contains
     * a related set of tests. This suite is all about the RSS
     * feeds definitions, the allFeeds variable in our application.
     */
    describe('RSS Feeds', function() {
        /* This is our first test - it tests to make sure that the
         * allFeeds variable has been defined and that it is not
         * empty.
         */
        it('are defined', function() {
            expect(allFeeds).toBeDefined();
            expect(allFeeds.length).not.toBe(0);
        });


        /* This is our second test - it ensures a feed item has a
         * URL defined and that the URL is not empty.
         */
        function definedURL(feed, index) {
            it('index ' + index + ' has URL defined', function() {
                expect(feed.url).toBeDefined();
                expect(feed.url.length).not.toBe(0);
            });
        }

        /* This is our third test - it ensures a feed item has a name
         * defined and that the name is not empty.
         */
        function definedName(feed, index) {
            it('index ' + index + ' has name defined', function() {
                expect(feed.name).toBeDefined();
                expect(feed.name.length).not.toBe(0);
            });
        }

        /* This is our actual loop function to run tests two and
         * three on each feed item in the allFeeds object.
         */
        for (var feed in allFeeds) {
            definedURL(allFeeds[feed], feed);
            definedName(allFeeds[feed], feed);
        };
    });


    /* This is our second test suite - this suite is all about the
     * menu functionality of our menu DOM element.
     */
    describe('The menu', function() {
        var body = $('body')

        /* This is our first test - it ensures the menu element is
         * hidden by default in the DOM.
         */
        it('is hidden by default', function() {
            expect(body.hasClass('menu-hidden')).toBe(true);
        });

        /* This is our second test - it ensures the menu changes
         * visibility when the menu icon is clicked. This test
         * has two expectations: does the menu display when clicked
         * and does it hide when clicked again.
         */
        it('changes visibility when the menu icon is clicked', function() {
            var click = $.Event('click');

            expect(body.hasClass('menu-hidden')).toBe(true);

            $('.menu-icon-link').trigger(click);

            expect(body.hasClass('menu-hidden')).not.toBe(true);

            $('.menu-icon-link').trigger(click);

            expect(body.hasClass('menu-hidden')).toBe(true);
        });

    });

    /* This is our third test suite - this suite is all about the
     * initial enteries generated by the load feed function.
     */
    describe('Initial Entries', function() {

        /* This is our first test - it insures that when the loadFeed
         * function is called and completes its work, there is at
         * least a single .entry element within the .feed container.
         * loadFeed() is asynchronous, so this test requires
         * the use of Jasmine's beforeEach and asynchronous done()
         * function.
         */
        beforeEach(function(done) {
            loadFeed(0, function() {
                done()
            });
        });

        it('has at least a single .entry element in the .feed container', function(done) {
            var container = $('.feed');

            expect(container.has('.entry').length).toBeGreaterThan(0);
            done()
        });
    });

    /* This is our fourth test suite - this suite is all about the
     * new feed selection when the loadFeed function runs.
     */
    describe('New Feed Selection', function() {

        /* This is our first test - it ensures when a new feed is
         * loaded by the loadFeed function that the content actually
         * changes. loadFeed() is asynchronous, requiring Jasmine's
         * beforeEach and done() methods.
         */
        var previousLoad;

        beforeEach(function(done) {
            previousLoad = $('.feed')
            loadFeed(1, function() {
                done();
            });
        });

        it('ensures loading a new feed changes content', function(done) {
            expect($('.feed')).not.toBe(previousLoad);
            done();
        });
    });

    /* This is our fifth test suite - this suite is all about feed
     * modifications to the allFeeds function.
     */
    describe('Feed Modification', function() {
        var feed;

        beforeEach(function() {
            feed = {
                name: 'RSS Tutorial',
                url: 'http://www.w3schools.com/rss'
            };

            addFeed(feed);
        })
        /* This is our first test - it ensures a new feed can be
         * added to the feed list. It must require the addition of a
         * name and URL that are not undefined to be a complete feed.
         */
        it('is able to add a new feed with specified name and URL', function() {
            var response_one, response_two, response_three;
            expect(allFeeds.indexOf(feed)).not.toBe(-1);

            var nullFeeds = function() {
                var notfeed_one = {};
                var notfeed_two = {
                    name: 'RSS Test'
                };
                var notfeed_three = {
                    url: 'http://www.example.com/rss'
                };

                try {
                    addFeed(notfeed_one);
                } catch(e) {
                    response_one = true;
                }

                try {
                    addFeed(notfeed_two);
                } catch(e) {
                    response_two = true;
                }

                try {
                    addFeed(notfeed_three);
                } catch(e) {
                    response_three = true;
                }
            };

            nullFeeds();


            expect(response_one).toBe(true);
            expect(response_two).toBe(true);
            expect(response_three).toBe(true);
        });

        /* This is our second test - it ensures a feed can be deleted
         * from the feed list. It must remove the feed from both the
         * model data and from the DOM.
         */
        it('is able to delete feeds', function() {
            deleteFeed(feed);

            expect(allFeeds.indexOf(feed)).toBe(-1);
            expect($('li:contains("' + feed.name + '")').length).toBe(0);
        });
    });
}());
